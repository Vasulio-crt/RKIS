## Теория ##
1. В каком году появился язык программирования, который вы изучали?
Кто его разработал? В чем его плюсы и минусы в сравнении с другими ЯП?
    1991, Гвидо ван Россумом, +(Читабельность кода, Простота, Универсальность)
    -(Медленная работа, Ресурсоёмкость).

2. Что такое язык программирования? Какие бывают типы языков?
Как компилируемые языки отличаются от интерпретируемых? Приведи примеры.
    ➙ ЯП - формальный язык, используемый для написания компьютерных программ, который
    предоставляет набор правил и инструкций для выполнения компьютером;
    ➙ ЯП бывают компилируемые и интерпретируемые;
    ➙ Способом обработки исходного кода для выполнения.

3. Какие парадигмы программирования существуют (ООП, функциональное, процедурное и др.)?
Вкратце расскажите про каждую из них.
    ➙ ООП - Программа строится из объектов, которые взаимодействуют друг с другом.
    включает такие понятия, как инкапсуляция, наследование и полиморфизм;
    ➙ Процедурное - Код разбивается на процедуры, которые выполняют определенные действия;
    ➙ Функциональное - Программа строится из функций, которые не имеют побочных
    эффектов и оперируют данными как математические функции;
    ➙ Логическое - Программа задается в виде набора фактов и правил,
    а результат вычисляется на основе логических операций.

4. Как работают переменные, какие типы данных есть, как преобразовать данные из одного
типа в другой, какие есть нюансы? Что такое статическая и динамическая типизация?
В чем их плюсы и минусы?
    ➙ Переменная - это контейнер, который хранит данные;
    ➙ Типы данных int, float, str, bool;
    ➙ Статическая и динамическая типизация - это два подхода к проверке типов данных;
    в языках программирования. Статическая типизация предполагает проверку типов
    во время компиляции, до запуска программы, в то время как динамическая типизация
    проверяет типы во время выполнения. 

5. Расскажите про условные выражения, условную конструкцию, конструкцию match...else
    ➙ Условные конструкции - позволяют программе выполнять различные блоки кода
    в зависимости от истинности заданных условий;

6. Расскажите про функции, как объявить, как использовать, нюансы создания,
как передать параметры, как принимать параметры, как принимать неопределенное кол-во
параметров, как возвращать значения.
    def название_функции(a, *args): # создания функции с параметром а
    # *args неопределенное кол-во параметров
        return a #возврат значений
    название_функции(1, 2, 3, 4) # использования функции, передача параметров

7. Расскажите про область видимости, приведите примеры.
    ➙ Область видимости - определяет, в какой части кода переменные, функции
    и другие элементы доступны для использования.
    
    global_var = "Я глобальная"
    def outer_function():
        outer_var = "Я охватывающая"
        def inner_function():
            inner_var = "Я локальная"
            print(inner_var)      # Локальная переменная
            print(outer_var)      # Охватывающая переменная
            print(global_var)     # Глобальная переменная


8. Что такое декораторы, зачем нужны, где используются, приведите пример использования.
    ➙ Декораторы - это функции, которые "оборачивают" другие функции или методы,
    добавляя к ним дополнительную функциональность, не изменяя исходный код.
    
    def decorator_function(func):
        def wrapper():
            print('Функция-обёртка!')
            print('Выполняем обёрнутую функцию...')
            func()
            print('Выходим из обёртки')
        return wrapper
    
    @decorator_function
    def hello_world():
        print('Hello world!')

9. Расскажите про обработку исключений, зачем нужно,
какая конструкция для этого есть, как она работает.
    ➙ Обработка исключений — это механизм, позволяющий программе корректно
    реагировать на ошибки во время выполнения, вместо аварийного завершения.
    Код который может вызвать исключение помещается в блок try, а код
    обрабатывающий это исключение в блок except.

10. Какие виды массивов есть в изученном ЯП. Расскажите про каждый вид,
его особенности, как объявить.
    ➙ lict изменяемый, set всегда уникальные знач,
    dict словарь ключ: знач, tuple неизменяемый.

11. Что такое класс? Что такое объект? Как создать класс и
объект в изученном ЯП, приведите пример.
    ➙ Класс - это как чертеж или шаблон для создания объектов.
    ➙ Объект - это экземпляр класса, то есть конкретное воплощение
    абстрактного понятия, определённого классом.

    class Dog:
        def __init__(self, name, breed):
            self.name = name
            self.breed = breed
    # Создание объектов класса Dog
    dog1 = Dog("Бобик", "Дворняга")
    dog2 = Dog("Шарик", "Овчарка")

12. Что такое полиморфизм? Приведите пример его реализации
на изученном ЯП.
    ➙ Полиморфизм позволяет объектам разных классов обрабатываться так,
    как будто они принадлежат одному классу.
    
    class Animal:
        def make_sound(self):
            raise NotImplementedError("Подклассы должны реализовать этот метод")

    class Dog(Animal):
        def make_sound(self):
            return "Гав!"

    class Cat(Animal):
        def make_sound(self):
            return "Мяу!"

    # Создаем экземпляры
    dog = Dog()
    cat = Cat()
    # Вызов метода make_sound для обоих животных
    print(dog.make_sound())  # Результат: Гав!
    print(cat.make_sound())  # Результат: Мяу!

13. Что такое наследование? Приведите пример его реализации
на изученном ЯП.
    ➙ Наследование - позволяющий создавать новый класс на основе
    уже существующего, заимствуя его атрибуты и методы.
    
    class Animal:
        def __init__(self, name):
            self.name = name

        def speak(self):
            print("Generic animal sound")

    class Dog(Animal):
        def speak(self):
            print("Woof!")

    my_dog = Dog("Buddy")
    my_dog.speak() # Вывод: Woof!

14. Что такое инкапсуляция? Приведите пример его реализации на изученном ЯП.
    ➙ Инкапсуляция — ограничение доступа к составляющим объект компонентам.

    # Одиночное подчеркивание в начале имени переменной или метода не предназначен
    # для использования вне методов класса, однако атрибут доступен по этому имени
    class A:
        def _private(self):
            print("Это приватный метод!")
    a = A()
    a._private() # Это приватный метод!

    # Двойное подчеркивание в начале имени атрибута даёт большую защиту
    # атрибут становится недоступным по этому имени.
    class B:
        def __private(self):
            print("Это приватный метод!")
    b = B()
    b.__private() # Ошибка

15. Какое ключевое слово указываем на текущий экземпляр класса?
Зачем оно нужно, как оно работает?
    ➙ self позволяет методам класса оперировать данными именно
    того объекта, для которого этот метод был вызван.

## Простые задачи ##
1. Напишите программу, которая находит сумму всех чисел от 1 до N.
2. Выведите все чётные числа от 1 до N.
3. Напечатайте таблицу умножения для числа K (от 1 до 10).
4. Определите, является ли строка палиндромом (читается одинаково слева направо и справа налево).
5. Найдите наименьшее и наибольшее число в списке.
6. Вычислите среднее значение чисел в массиве.
7. Удалите повторяющиеся элементы из массива.
8. Посчитайте количество слов в строке.
9. Вычислите факториал числа N (N! = 1×2×...×N).
10. Найдите наибольшее из трёх чисел.
11. Определите, является ли число чётным.
12. Найдите сумму цифр числа.
13. Проверьте, есть ли число X в данном массиве.
14. Посчитайте количество чётных и нечётных чисел в массиве.
15. Условия:
    ·  Год кратен 400 → високосный;
    ·  Год кратен 100 → не високосный;
    ·  Год кратен 4 → високосный.

## Сложные задачи ##
1. Отсортируйте массив чисел методом пузырька.
2. Переверните строку без использования встроенных функций.
3. В массиве из N-1 чисел от 1 до N найдите пропущенное.
4. Переверните массив без использования встроенных функций.
5. Найдите второй наибольший элемент в массиве.
6. Вычислите сумму всех элементов матрицы.
7. Найдите наибольший элемент в матрице.
8. Дан массив чисел и target. Найдите два числа, которые в сумме дают target.
9. Посчитайте, сколько раз каждая буква встречается в строке (без учёта регистра).
10. Определите, является ли число совершенным. Совершенное число — это число, равное сумме своих делителей (например, 6 = 1 + 2 + 3).
11. Напишите Конвертер секунд в часы:минуты:секунды Например, 3661 → 1:01:01.
12. Проверьте, является ли строка s2 вращением строки s1 (например "waterbottle" и "erbottlewat").
13. Реализуйте алгоритм сжатия, заменяющий повторяющиеся символы их количеством (например "aabcccccaaa" → "a2b1c5a3").
14. Найдите все пары слов, которые при объединении образуют палиндром.
15. Напишите функцию реализующую шифр Цезаря.
